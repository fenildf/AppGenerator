/**
 * Title: BaseApplication.java
 * Description:
 * Copyright: Copyright (c) 2013 luoxudong.com
 * Company:个人
 * Author 罗旭东 (hi@luoxudong.com)
 * Date 2014-1-9 下午9:46:15
 * Version 1.0
 */
package #{AppPackage}.logic.common;

import java.io.File;

import android.app.Application;
import android.content.Intent;
import android.text.TextUtils;

import #{AppPackage}.logic.db.model.UserInfo;
import #{AppPackage}.logic.network.http.#{ProjectPrefix}JsonHttpResponseAdapter;
import #{AppPackage}.logic.upgrade.UpgradeManagerFactory;
import #{AppPackage}.logic.user.UserFactory;
import #{AppPackage}.logic.user.manager.UserCallable;
import #{AppPackage}.logic.utils.ConfigUtil;
import #{AppPackage}.logic.utils.GlobalUtil;
import #{AppPackage}.logic.utils.MetaDataUtil;
import com.luoxudong.app.asynchttp.AsyncHttpUtil;
import com.luoxudong.app.asynchttp.utils.AsyncHttpLog;
import com.luoxudong.app.database.utils.DbLogUtil;
import com.luoxudong.app.utils.LogUtil;
import com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiskCache;
import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;
import com.nostra13.universalimageloader.cache.memory.impl.UsingFreqLimitedMemoryCache;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
import com.nostra13.universalimageloader.core.download.BaseImageDownloader;
import com.umeng.analytics.MobclickAgent;

/** 
 * ClassName: BaseApplication
 * Description:application
 * Create by 罗旭东
 * Date 2014-1-9 下午9:46:15
 */
public class BaseApplication extends Application{
	private static final String TAG = BaseApplication.class.getSimpleName();
	
	/** 上下文 */
	private static BaseApplication sContext = null;
	
	@Override
	public void onCreate() {
		super.onCreate();

		sContext = this;
		appInit();
		
		//设置未捕获异常处理器
		Thread.setDefaultUncaughtExceptionHandler(new BaseUncaughtExceptionHandler(this));
		
		LogUtil.i(TAG, "Application启动完成...");
	}
	
	@Override
	public void onTerminate() {//调用时机问题
		super.onTerminate();
	}
	
	public static BaseApplication getInstance() {
		return sContext;
	}
	
	/**
	 * 应用初始化
	 */
	private void appInit(){
		MobclickAgent.updateOnlineConfig(this);//更新友盟服务器配置
		
		if (MetaDataUtil.isShowLog(this)){//打开日志
			AsyncHttpLog.enableLog();
			DbLogUtil.enableLog();
			LogUtil.enableLog();
		}
		
		//初始化升级脚本
		UpgradeManagerFactory.getUpgradeManager().initUpgradeData(this);
		
		//数据库路径
		BaseConstant.DATABASE_PATH = getApplicationContext().getDatabasePath(BaseConstant.DATABASE_NAME).getAbsolutePath();
		
		//设置http请求返回数据处理机制
		AsyncHttpUtil.setResponseAdapter(new #{ProjectPrefix}JsonHttpResponseAdapter());
		//AsyncHttpUtil.setSSLSocketFactory(#{ProjectPrefix}SSLSocketFactory.getInstance());
		ConfigUtil.initSysDirs(this);
		ConfigUtil.initUserDir(this, null);
		
		initImageLoader();
		
		startService(new Intent(this, BaseService.class));
	}
	
	private void initImageLoader(){
		File cacheDir = new File(BaseConstant.USER_CACHE_IMAGE);
		ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(this)
				.threadPoolSize(5)// 线程池内加载的数量
				.threadPriority(Thread.NORM_PRIORITY - 2)
				.denyCacheImageMultipleSizesInMemory()
				.memoryCache(new UsingFreqLimitedMemoryCache(2 * 1024 * 1024))//你可以通过自己的内存缓存实现
				.memoryCacheSize(2 * 1024 * 1024)
				.discCacheFileNameGenerator(new Md5FileNameGenerator())// 将保存的时候的URI名称用MD5 加密
				.tasksProcessingOrder(QueueProcessingType.LIFO)// 缓存的文件数量
				.discCache(new UnlimitedDiskCache(cacheDir))
				// 自定义缓存路径
				.defaultDisplayImageOptions(DisplayImageOptions.createSimple())
				.imageDownloader(new BaseImageDownloader(this, 30 * 1000, 30 * 1000)) //超时时间
				.build();

		ImageLoader.getInstance().init(config);// 全局初始化此配置
	}
}
