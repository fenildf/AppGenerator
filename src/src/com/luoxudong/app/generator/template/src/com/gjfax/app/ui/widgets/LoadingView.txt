/**
 * Title: LoadingView.java
 * Description: 
 * Copyright: Copyright (c) 2013-2015 luoxudong.com
 * Company: 个人
 * Author: 罗旭东 (hi@luoxudong.com)
 * Date: 2015年8月23日 下午4:07:03
 * Version: 1.0
 */
package #{AppPackage}.ui.widgets;

import android.content.Context;
import android.os.Handler;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.animation.Animation;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import #{AppPackage}.R;
import com.luoxudong.app.utils.click.OnClickAvoidForceListener;

/** 
 * <pre>
 * ClassName: LoadingView
 * Description:页面内的加载框
 * Create by: 罗旭东
 * Date: 2015年8月23日 下午4:07:03
 * </pre>
 */
public class LoadingView extends LinearLayout {
	/** 加载样式 */
	public static final int VIEW_TYPE_LOADING = 0;
	
	/** 加载成功样式 */
	public static final int VIEW_TYPE_LOAD_SUC = 1;
	
	/** 加载失败 失败*/
	public static final int VIEW_TYPE_LOAD_FAIL = 2;
	
	private LinearLayout mErrorLayout = null;
	
	private LinearLayout mSucLayout = null;
	
	/** 加载图片 */
	private ImageView mLoadingImageView = null;
	
	/** 刷新按钮 */
	private ImageView mRefreshImageView = null;
	
	/** 加载中文字 */
	private TextView mLoadingMsgTextView = null;
	
	/** 加载成功提示信息 */
	private TextView mLoadSucMsgTextView = null;
	
	/** 加载失败提示信息 */
	private TextView mLoadFailMsgTextView = null;
	
	/** 当前样式 */
	private int mCurrentType = VIEW_TYPE_LOADING;
	
	/** 旋转动画 */
	private RotateYAnimation mAnimation = null;
	
	/**操作回调 */
	private OnLoadingViewListener mOnLoadingViewListener = null;
	
	private Runnable mRunnable = new Runnable() {
		@Override
		public void run() {
			setVisibility(View.GONE);
			mLoadingImageView.clearAnimation();
			removeCallbacks(this);
			if (mOnLoadingViewListener != null){
				mOnLoadingViewListener.onDismiss();
			}
		}
	};
	
	private Handler mHandler = new Handler();
	
	private OnClickAvoidForceListener mOnClickListener = new OnClickAvoidForceListener() {
		@Override
		public void onClickAvoidForce(View v) {
			switch (v.getId()) {
			case R.id.ll_loading_view_error:
			case R.id.iv_loading_view_error:
				if (mOnLoadingViewListener != null){
					mOnLoadingViewListener.onRefresh();
				}
				break;
			default:
				break;
			}
		}
	};
	
	public LoadingView(Context context) {
		super(context);
		init();
	}
	
	public LoadingView(Context context, AttributeSet attrs) {
		super(context, attrs);
		init();
	}
	
	public LoadingView(Context context, AttributeSet attrs, int defStyleAttr) {
		super(context, attrs, defStyleAttr);
		init();
	}

	private void init(){
		LayoutInflater inflater = (LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		View contentView = inflater.inflate(R.layout.layout_loading_view, null);
		mErrorLayout = (LinearLayout)contentView.findViewById(R.id.ll_loading_view_error);
		mSucLayout = (LinearLayout)contentView.findViewById(R.id.ll_loading_view_suc);
		mLoadingImageView = (ImageView)contentView.findViewById(R.id.iv_loading_view_loading);
		mRefreshImageView = (ImageView)contentView.findViewById(R.id.iv_loading_view_error);
		mLoadingMsgTextView = (TextView)contentView.findViewById(R.id.tv_loading_view_loading_msg);
		mLoadSucMsgTextView = (TextView)contentView.findViewById(R.id.tv_loading_view_suc_msg);
		mLoadFailMsgTextView = (TextView)contentView.findViewById(R.id.tv_loading_view_error_msg);
		
		contentView.setOnClickListener(null);
		addView(contentView, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
		setGravity(Gravity.CENTER);
		
		mAnimation = new RotateYAnimation();
		mAnimation.setFillAfter(true);
		mAnimation.setRepeatCount(Animation.INFINITE);
	}

	/**
	 * 设置view样式
	 * @param type
	 * @param text
	 */
	public void setView(int type, String text){
		mCurrentType = type;
		setVisibility(View.VISIBLE);
		switch (type) {
		case VIEW_TYPE_LOADING:
			initLoadingView(text);
			break;
		case VIEW_TYPE_LOAD_SUC:
			initLoadSucView(text);
			break;
		case VIEW_TYPE_LOAD_FAIL:
			initLoadFailView(text);
			break;
		default:
			break;
		}
	}
	
	/**
	 * 隐藏控件
	 */
	public void hiddenView(){
		mHandler.postDelayed(mRunnable, 600);//确保界面先刷新再移除该控件
	}
	
	/**
	 * 加载界面
	 * @param text 加载提示文字
	 */
	private void initLoadingView(String text){
		mErrorLayout.setVisibility(View.GONE);
		mSucLayout.setVisibility(View.GONE);
		
		if (!TextUtils.isEmpty(text)){
			mLoadingMsgTextView.setText(text);
		}
		
		mLoadingImageView.startAnimation(mAnimation);
	}
	
	/**
	 * 加载失败界面
	 * @param text 加载提示文字
	 */
	private void initLoadFailView(String text){
		mErrorLayout.setVisibility(View.VISIBLE);
		mSucLayout.setVisibility(View.GONE);
		
		if (!TextUtils.isEmpty(text)){
			mLoadFailMsgTextView.setText(text);
		}
		
		if (mOnClickListener != null){
			mRefreshImageView.setOnClickListener(mOnClickListener);
			mErrorLayout.setOnClickListener(mOnClickListener);
		}
	}
	
	/**
	 * 加载成功界面
	 * @param text 加载提示文字
	 */
	private void initLoadSucView(String text){
		mSucLayout.setVisibility(View.VISIBLE);
		if (!TextUtils.isEmpty(text)){
			mLoadSucMsgTextView.setText(text);
		}
	}
	
	public void setOnLoadingViewListener(OnLoadingViewListener onLoadingViewListener) {
		mOnLoadingViewListener = onLoadingViewListener;
	}

	public int getViewType() {
		return mCurrentType;
	}
}
