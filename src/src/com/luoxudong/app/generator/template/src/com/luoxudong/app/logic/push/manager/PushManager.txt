/**
 * Title: PushManager.java
 * Description:
 * Copyright: Copyright (c) 2013 luoxudong.com
 * Company:个人
 * Author 罗旭东 (hi@luoxudong.com)
 * Date 2014-8-27 下午3:33:10
 * Version 1.0
 */
package #{AppPackage}.logic.push.manager;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.support.v4.app.NotificationCompat;
import android.text.TextUtils;

import #{AppPackage}.R;
import #{AppPackage}.logic.common.BaseConstant;
import #{AppPackage}.logic.push.interfaces.IPushManager;
import #{AppPackage}.logic.push.vo.Notice;
import #{AppPackage}.logic.utils.MetaDataUtil;
import #{AppPackage}.ui.activities.NoticeClickActivity;
import com.google.gson.Gson;
import com.luoxudong.app.utils.LogUtil;

/** 
 * ClassName: PushManager
 * Description:推送管理类
 * Create by 罗旭东
 * Date 2014-8-27 下午3:33:10
 */
public class PushManager implements IPushManager{
	private static final String TAG = PushManager.class.getSimpleName();
	
	/** 通知 */
	private static final String ID_NOTICE = "notice";
	
	@Override
	public void filterPusMessage(Context context, String message) {
		LogUtil.e(TAG, message);
		
		if (TextUtils.isEmpty(message)){
			return;
		}
		try {
			JSONObject jsonObject = new JSONObject(message);
			String id = jsonObject.getString("id");
			String body = jsonObject.getString("body");
			int debug = jsonObject.getInt("debug");
			
			if (TextUtils.isEmpty(id) || TextUtils.isEmpty(body)){
				return;
			}
			
			if (debug == 1 && MetaDataUtil.isRelease(context)){//发布版本过滤掉推送调试信息
				return;
			}
			
			Gson gson = new Gson();
			if (ID_NOTICE.equalsIgnoreCase(id)){
				Notice notice = gson.fromJson(body, Notice.class);
				receiverNotice(context, notice);
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	private void receiverNotice(Context context, Notice notice){
		NotificationManager notificationManager = (NotificationManager) context.getSystemService(context.NOTIFICATION_SERVICE);  
		Intent intent = new Intent(context, NoticeClickActivity.class);
		intent.putExtra(NoticeClickActivity.EXTRA_NOTICE, notice);
		PendingIntent pendingIntent= PendingIntent.getActivity(context, 1, intent, PendingIntent.FLAG_UPDATE_CURRENT);
		NotificationCompat.Builder builder = new NotificationCompat.Builder(context);
		builder.setContentTitle(notice.getTitle())//设置通知栏标题  
	    .setContentText(notice.getContent())
	    .setContentIntent(pendingIntent)//设置通知栏点击意图  
	    .setTicker(notice.getTitle()) //通知首次出现在通知栏，带上升动画效果的  
	    .setWhen(System.currentTimeMillis())//通知产生的时间，会在通知信息里显示，一般是系统获取到的时间  
	    .setPriority(Notification.PRIORITY_DEFAULT) //设置该通知优先级  
	    .setAutoCancel(true)//设置这个标志当用户单击面板就可以让通知将自动取消    
	    .setOngoing(false)//ture，设置他为一个正在进行的通知。他们通常是用来表示一个后台任务,用户积极参与(如播放音乐)或以某种方式正在等待,因此占用设备(如一个文件下载,同步操作,主动网络连接)  
	    .setDefaults(Notification.DEFAULT_VIBRATE | Notification.DEFAULT_SOUND)//向通知添加声音、闪灯和振动效果的最简单、最一致的方式是使用当前的用户默认设置，使用defaults属性，可以组合  
	    //Notification.DEFAULT_ALL  Notification.DEFAULT_SOUND 添加声音 // requires VIBRATE permission  
	    .setSmallIcon(R.drawable.ic_launcher);//设置通知小ICON  
		notificationManager.notify(0, builder.build());
	}
}